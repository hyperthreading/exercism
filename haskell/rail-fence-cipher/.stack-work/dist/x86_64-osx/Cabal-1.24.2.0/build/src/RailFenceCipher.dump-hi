
==================== FINAL INTERFACE ====================
2018-03-19 16:53:57.287063 UTC

interface rail-fence-cipher-1.1.0.1-FKfXi7zErCyD8qq2yZZePd:RailFenceCipher 8002
  interface hash: e56edf2dc7595578f10cbb64d0cdf989
  ABI hash: 5c6f6532922d6448aa2e7c0863b4310d
  export-list hash: f81f0b1466ae4c420716a5ce0ac7d5f7
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: f6624f22fcdd76ed0ac6625466e2d712
  sig of: Nothing
  used TH splices: False
  where
exports:
  RailFenceCipher.decode
  RailFenceCipher.encode
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:Data.OldList 27987919d8da2f92e3f472ca81f730f8
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Err 3bba35a16538d33d424682ce66876cdd
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
4c4ca1174e7eb16078013b2a3ec3b96d
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   RailFenceCipher.$trModule2
                   RailFenceCipher.$trModule1) -}
f5bf4bc38a2409f1d09285b4d84aa578
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "RailFenceCipher"#) -}
05e3e5122399a1da94a0e836c4a97abd
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "rail-fence-cipher-1.1.0.1-FKfXi7zErCyD8qq2yZZePd"#) -}
bff9256cc2a3ec7bee7bd5c8c5ac5247
  $wtoCipher ::
    GHC.Types.Int
    -> GHC.Base.String -> (# [GHC.Base.String], [[GHC.Base.String]] #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><S,U>,
     Inline: [0] -}
e5cc4a5794370108793676dc0bc0a9e3
  decode :: GHC.Types.Int -> GHC.Base.String -> GHC.Base.String
  {- Strictness: x -}
63876e3f5328fea581cb0e5603819932
  encode :: GHC.Types.Int -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><S,U>,
     Unfolding: (\ (height :: GHC.Types.Int)
                   (text :: GHC.Base.String) ->
                 case RailFenceCipher.$wtoCipher
                        height
                        text of ww { (#,#) ww1 ww2 ->
                 RailFenceCipher.encode_go
                   (Data.OldList.transpose_$stranspose
                      @ [GHC.Types.Char]
                      ww1
                      ww2) }) -}
f65f8a599f0f97d63802867da083feea
  encode_go :: [[[GHC.Types.Char]]] -> [GHC.Types.Char]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

